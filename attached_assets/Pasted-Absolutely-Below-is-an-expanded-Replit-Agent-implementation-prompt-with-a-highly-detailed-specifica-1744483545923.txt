Absolutely. Below is an expanded Replit Agent implementation prompt with a highly detailed specification for Playbook creation logic, especially focusing on the task series configuration based on trigger selection, before saving. This will guide Replit to build a fully production-grade Playbook creation flow inside Recurrer, matching your expectations precisely.

⸻

Replit Agent Prompt: Implement Full Playbook Creation Logic in Recurrer

Enhance the Playbook module in Recurrer – Customer Success OS by building a robust, interactive Playbook Creation workflow that allows Admin users to define multi-step task series based on trigger logic before saving the playbook. This should tightly integrate with existing frontend/backend structure and user roles.

⸻

Module Context

This feature belongs to the /playbooks/workflow page, built in React + Tailwind. The Playbook must be persisted in Supabase (playbooks, playbook_tasks, playbook_runs) and integrated into task creation logic used throughout the platform.

⸻

Part 1: Playbook Creation UI Workflow

1.1 Playbook Creation Flow

When Admin clicks “New Playbook”, launch the Playbook Workflow Builder with:
	•	Step 1: Basic Playbook Details
	•	Playbook Title (input, required)
	•	Description (textarea)
	•	Trigger Type (dropdown):
	•	Manual
	•	New Customer Created
	•	Usage Drop
	•	Renewal Approaching
	•	Custom Event (future support)
	•	Target Account Types (multi-select): Starter, Growth, Key
	•	Filters (optional): POD, Location Count, ARR, Plan Type
	•	Step 2: Task Series Builder
	•	Display a visual vertical sequence of tasks
	•	Each task should contain:
	•	Task Title
	•	Task Description
	•	Due Date Type:
	•	Fixed Date → Calendar Picker
	•	Relative to Trigger → Input number of days (e.g., 3 days after trigger)
	•	Recurrence (dropdown):
	•	None
	•	Daily / Weekly / Monthly / Bi-weekly
	•	Assignee Role (dropdown): CSM, TL, Admin
	•	Required Fields (checkboxes): Comment, Recording Link, Attachment
	•	Template Message (markdown): Support variables like:
	•	{{customer_name}}, {{renewal_date}}, {{csm_name}}
	•	Allow:
	•	Add new task
	•	Delete task
	•	Reorder task (drag-and-drop or up/down buttons)
	•	Step 3: Review Summary (Before Save)
	•	Display structured preview of:
	•	Playbook title, trigger, filters
	•	Timeline view of tasks: “Day 0 → Task A”, “Day 2 → Task B”
	•	Option to go back and edit
	•	Save Button → triggers backend API to persist Playbook and tasks

⸻

Part 2: Playbook Backend Logic (Express + Supabase)

2.1 API Route: Create New Playbook
	•	Endpoint: POST /api/playbooks
	•	Input structure:

{
  "title": "New Customer Onboarding",
  "description": "...",
  "trigger_type": "new_customer",
  "target_segments": ["starter", "growth"],
  "filters": { "location_count": ">=5", "arr": "<500000" },
  "tasks": [
    {
      "title": "Kickoff Call",
      "description": "...",
      "due_type": "relative",
      "due_offset": 0,
      "recurrence": "none",
      "assignment_role": "CSM",
      "required_fields": ["comment"],
      "template_message": "Welcome {{customer_name}}!"
    },
    ...
  ]
}


	•	Behavior:
	•	Insert playbook into playbooks table
	•	Insert each task into playbook_tasks with reference to parent
	•	Return 201 Created with full playbook payload

2.2 Server Validation
	•	Required:
	•	At least one task
	•	Valid due logic (relative/fixed)
	•	Recognized assignment roles
	•	Auto-generate UUIDs server-side
	•	Attach created_by field from req.user.id (Supabase auth)

⸻

Part 3: Frontend Behavior

3.1 UX Expectations
	•	No task can be saved until the Playbook passes:
	•	Title present
	•	At least one task
	•	Valid due offset or fixed date
	•	Add inline error handling for:
	•	Missing task title
	•	Negative due offset
	•	Duplicate tasks
	•	Disable “Save Playbook” until validation passes

3.2 Task Component UI
	•	TaskCard should be collapsible for cleaner editing
	•	Use Tailwind cards with:
	•	bg-white, rounded-lg, shadow-sm, hover expansion
	•	Icons for reorder/delete
	•	Add “Add Task” button with “+” icon

⸻

Part 4: Integration and Trigger Handling

4.1 Trigger Engine
	•	On system events (e.g. new customer added), backend service should:
	•	Query matching active playbooks
	•	Apply filters (account type, location, etc.)
	•	Generate tasks for all matching playbooks
	•	Store logs in playbook_runs

4.2 Task Generation Output
	•	For each task:
	•	Insert into tasks table
	•	Set playbook_task_id reference
	•	Compute due date based on playbook definition
	•	Assign to correct user via customer → profile relationship

⸻

Part 5: Data Models and Schema (Supabase)

Ensure tables reflect this structure:

playbooks (
  id UUID PRIMARY KEY,
  title TEXT,
  description TEXT,
  trigger_type TEXT,
  target_segments TEXT[],
  filters JSONB,
  created_by UUID REFERENCES profiles(id),
  created_at TIMESTAMP DEFAULT NOW(),
  active BOOLEAN DEFAULT TRUE
)

playbook_tasks (
  id UUID PRIMARY KEY,
  playbook_id UUID REFERENCES playbooks(id),
  title TEXT,
  description TEXT,
  due_type TEXT, -- fixed or relative
  due_offset INTEGER,
  fixed_date DATE,
  recurrence TEXT,
  assignment_role TEXT,
  required_fields TEXT[],
  template_message TEXT,
  position INTEGER, -- for ordering
  created_at TIMESTAMP DEFAULT NOW()
)



⸻

Final Deliverables
	•	Fully functional Playbook creation page with live preview
	•	Save logic that persists both Playbook and Tasks
	•	Tasks support recurrence, due logic, and assignment rules
	•	Clear validation and error handling
	•	Backend endpoint to receive and validate full playbook JSON
	•	Trigger engine processes and creates tasks on matching criteria
	•	Playbook Tasks stored, tracked, and reportable

Let me know if further customization is needed for advanced conditions or trigger types.